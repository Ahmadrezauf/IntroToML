scaleColor <- as.character(tmp$cols)
names(scaleColor) <- as.character(tmp$cellTypes)
visualizetSNEggPlot(tsRes , 2 , droplet.cellTypes, colnames(droplet.sampledDataset.l2Normalized) , scaleColor = scaleColor, leg = F)
length(droplet.cellTypes)
tsRes <- Rtsne(X = t(as.matrix(droplet.sampledDataset.l2Normalized)) , dims = 2 , perplexity = 25)
myColors <- c("blue" , "green")
tmp <- data.frame(cellTypes = unique(droplet.cellTypes) , cols = myColors)
scaleColor <- as.character(tmp$cols)
names(scaleColor) <- as.character(tmp$cellTypes)
visualizetSNEggPlot(tsRes , 2 , droplet.cellTypes, colnames(droplet.sampledDataset.l2Normalized) , scaleColor = scaleColor, leg = F)
source("./Src/Utility.R")
tmpRowSum <- rowSums(droplet.sampledDataset)
droplet.sampledDataset <- droplet.sampledDataset[(tmpRowSum != 0),]
droplet.sampledDataset.l2sqrNormalized <- NormalizeL2Sqr(droplet.sampledDataset)
droplet.sampledDataset.l2Normalized <- NormalizeL2(droplet.sampledDataset)
data <- droplet.sampledDataset.l2Normalized
library(Seurat)
seuratObj <- CreateSeuratObject(counts = data , project = "ClusteringBladBcell")
tmpKmeans <- kmeans(x = t(droplet.sampledDataset.l2Normalized), centers = 2 , iter.max = 10000 , nstart = 1, trace = T)
class(tmpKmeans$cluster)
sum(tmpKmeans$cluster[1:100] != 2)
tsRes <- Rtsne(X = t(as.matrix(droplet.sampledDataset.l2Normalized)) , dims = 2 , perplexity = 25)
myColors <- c("blue" , "green")
tmp <- data.frame(cellTypes = unique(droplet.cellTypes) , cols = myColors)
scaleColor <- as.character(tmp$cols)
names(scaleColor) <- as.character(tmp$cellTypes)
visualizetSNEggPlot(tsRes , 2 , droplet.cellTypes, colnames(droplet.sampledDataset.l2Normalized) , scaleColor = scaleColor, leg = F)
dim(droplet.sampledDataset.l2Normalized)
droplet.sampledDataset.l2Normalized <- NormalizeL2(droplet.sampledDataset)
visualizetSNEggPlot(tsRes , 2 , droplet.cellTypes, colnames(droplet.sampledDataset.l2Normalized) , scaleColor = scaleColor, leg = F)
visualizetSNEggPlot(tsRes , 2 , droplet.cellTypes, colnames(droplet.sampledDataset.l2Normalized) , scaleColor = scaleColor, leg = F)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(readr , warn.conflicts = F , quietly = T)
library(DESeq2 , warn.conflicts = F , quietly = T)
library(destiny)
library(data.tree)
library(igraph)
library(visNetwork)
library(statmod)
library(purrr)
library(Rtsne)
source("./Src/Utility_Clustering.R")
source("./Src/Utility.R")
options(readr.num_columns = 0)
dropSeqBladder <- read.table(file = "./Data/Dropseq_3M9_Bladder_Bladder.csv" , sep = ",")
dropSeqBcell <- read.table(file = "./Data/Dropseq_3M8_Spleen_Bcell.csv" , sep = ",")
dropSeqBladder$X1 <- rownames(dropSeqBladder)
dropSeqBcell$X1 <- rownames(dropSeqBcell)
droplet.sampledDataset <- dropSeqBladder %>% full_join(dropSeqBcell , by = "X1")
rownames(droplet.sampledDataset) <- droplet.sampledDataset$X1
droplet.sampledDataset <- droplet.sampledDataset %>% select(-c(X1))
droplet.cellTypes <- c(rep("Bladder" , 500) , rep("Bcell" , 500))
iData <- droplet.sampledDataset
iData <- iData^2
iData %>%
colSums(na.rm = T) %>%
sqrt() -> sampleSum
ggplot(data.frame(cellSizes = sampleSum , group = factor(droplet.cellTypes))) +
geom_histogram(aes(x = log(cellSizes) , fill = group) , position = "dodge" , binwidth = 0.1)
source("./Src/Utility.R")
tmpRowSum <- rowSums(droplet.sampledDataset)
droplet.sampledDataset <- droplet.sampledDataset[(tmpRowSum != 0),]
droplet.sampledDataset.l2sqrNormalized <- NormalizeL2Sqr(droplet.sampledDataset)
droplet.sampledDataset.l2Normalized <- NormalizeL2(droplet.sampledDataset)
droplet.poissonModelL2 <- HVG_Poisson(droplet.sampledDataset.l2Normalized)
genesInfo <- droplet.poissonModelL2[[2]]
genesInfo %>% group_by(names) %>%
mutate(isAboveThreshold = ifelse(logAlpha > 1.1 , 1 , 0)) -> genesInfo
tmp <- genesInfo %>% filter(isAboveThreshold == 1)
droplet.PoissModel.hvg <- as.character(tmp$names)
length(droplet.PoissModel.hvg)
# We chose 1.1  to have around 3k genes
all.genes <- rownames(seuratObj)
data <- droplet.sampledDataset.l2Normalized
library(Seurat)
seuratObj <- CreateSeuratObject(counts = data , project = "ClusteringBladBcell")
all.genes <- rownames(seuratObj)
seuratObj.genesScaled <- ScaleData(seuratObj, features = all.genes)
seuratObj.genesScaled <- FindVariableFeatures(seuratObj.genesScaled)
seuratObj.genesScaled <- RunPCA(seuratObj.genesScaled , features = VariableFeatures(seuratObj.genesScaled))
seuratObj.genesScaled <- RunUMAP(seuratObj.genesScaled, dims = 1:10)
DimPlot(seuratObj.genesScaled, reduction = "umap")
tsRes <- Rtsne(X = t(as.matrix(droplet.sampledDataset.l2Normalized)) , dims = 2 , perplexity = 25)
myColors <- c("blue" , "green")
tmp <- data.frame(cellTypes = unique(droplet.cellTypes) , cols = myColors)
scaleColor <- as.character(tmp$cols)
names(scaleColor) <- as.character(tmp$cellTypes)
visualizetSNEggPlot(tsRes , 2 , droplet.cellTypes, colnames(droplet.sampledDataset.l2Normalized) , scaleColor = scaleColor, leg = F)
dim(dropSeqBcell)
dim(dropSeqBladder)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(readr , warn.conflicts = F , quietly = T)
library(DESeq2 , warn.conflicts = F , quietly = T)
library(destiny)
library(data.tree)
library(igraph)
library(visNetwork)
library(statmod)
library(purrr)
library(Rtsne)
library(mclust)
source("./Src/Utility_Clustering.R")
source("./Src/Utility.R")
options(readr.num_columns = 0)
dat <- read.table("./Data/Clustering Dataset/Counts.csv" , sep= ",")
cellTypesDf <- read.table("./Data/Clustering Dataset/cellTypes.csv" , sep = ",")
rownames(dat) <- dat$X1
dat <- dat %>% select(-c(X1))
dat.normalized <- NormalizeL2(dat)
tmpRowSum <- rowSums(as.matrix(dat.normalized))
dat.normalized <- dat.normalized[(tmpRowSum != 0) , ]
tmpColSum <- colSums(as.matrix(dat.normalized))
dat.normalized <- dat.normalized[,(tmpColSum != 0)]
cellTypesDf <- cellTypesDf[(tmpColSum != 0) , ]
myColors <- c("green" , "green1", "green2" , "green3" , "green4" , "springgreen", "red3" , "red2" , "royalblue" , "royalblue3" , "royalblue4" , "skyblue" , "skyblue1" , "skyblue2" , "skyblue3", "blue" , "blue1" , "blue2" , "blue3" , "blue4" , "turquoise1")
cellTypesDf$tissue <- as.character(cellTypesDf$tissue)
cellTypesDf$subTissues <- as.character(cellTypesDf$subTissues)
cellTypes <- cellTypesDf$subTissues
tmp <- data.frame(cellTypes = unique(cellTypes) , cols = myColors[1:length(unique(cellTypes))])
scaleColor <- as.character(tmp$cols)
names(scaleColor) <- as.character(tmp$cellTypes)
myColors2 <- c("blue" , "green" , "red")
tmp <- data.frame(cellTypes = as.character(c(unique(cellTypesDf$tissue))) , cols = myColors2)
colorTissue <- as.character(tmp$cols)
names(colorTissue) <- as.character(tmp$cellTypes)
tsRes <- Rtsne(X = t(as.matrix(dat.normalized)) , dims = 2 , perplexity = 50)
p <- visualizetSNEggPlot(tsneObj = tsRes , dims = 2 , cellTypes = cellTypes , sampNames = colnames(dat.normalized) ,
scaleColor = scaleColor , leg = F)
p
tmpKmeans <- kmeans(x = t(as.matrix(dat.normalized)), centers = 3 , iter.max = 10000 , nstart = 1, trace = T)
length(unique(tmpKmeans$cluster))
adjustedRandIndex(cellTypesDf$tissue , tmpKmeans$cluster)
gmmClust <- Mclust(t(as.matrix(dat.normalized)) , G = 3 , verbose = T)
genesInfo <- findHighlyVariableGenes(dat.normalized, 0.5, 0)
genesInfo <- findHighlyVariableGenes(dat.normalized, 1, 0)
genesInfo <- findHighlyVariableGenes(dat.normalized, 1.1, 0)
dat.normalized.hvg <- genesInfo[3]
head(genesInfo[1])
head(genesInfo[2])
#testing k-means
tmpKmeans <- kmeans(x = t(as.matrix(dat.normalized.hvg)), centers = 3 , iter.max = 10000 , nstart = 1, trace = T)
dat.normalized.hvg <- genesInfo[3]
head(dat.normalized.hvg)
dat.normalized.hvg <- genesInfo[[3]]
#testing k-means
tmpKmeans <- kmeans(x = t(as.matrix(dat.normalized.hvg)), centers = 3 , iter.max = 10000 , nstart = 1, trace = T)
length(unique(tmpKmeans$cluster))
adjustedRandIndex(cellTypesDf$tissue , tmpKmeans$cluster)
gmmClust <- Mclust(t(as.matrix(dat.normalized.hvg)) , G = 3 , verbose = T)
gmmClust
adjustedRandIndex(cellTypesDf$tissue, gmmClust$classification)
length(unique(cellTypesDf$tissue))
gmmClust <- Mclust(t(as.matrix(dat.normalized.hvg)) , G = 3)
adjustedRandIndex(cellTypesDf$tissue, gmmClust$classification)
gmmClust <- Mclust(t(as.matrix(dat.normalized.hvg)) , G = 21)
adjustedRandIndex(cellTypesDf$subTissues, gmmClust$classification)
library(Seurat)
seuratObj <- CreateSeuratObject(counts = dat.normalized.hvg , project = "ClusteringBladBcell")
seuratObj <- CreateSeuratObject(counts = dat.normalized.hvg , project = "Clustering")
all.genes <- rownames(seuratObj)
seuratObj.genesScaled <- ScaleData(seuratObj, features = all.genes)
seuratObj.genesScaled <- FindVariableFeatures(seuratObj.genesScaled)
seuratObj.genesScaled <- RunPCA(seuratObj.genesScaled , features = VariableFeatures(seuratObj.genesScaled))
seuratObj.genesScaled <- RunUMAP(seuratObj.genesScaled, dims = 1:10)
DimPlot(seuratObj.genesScaled, reduction = "umap")
seuratObj.genesScaled$orig.ident
pbmc <- FindNeighbors(pbmc, dims = 1:21)
seuratObj.genesScaled <- FindNeighbors(seuratObj.genesScaled, dims = 1:21)
seuratObj.genesScaled <- FindClusters(seuratObj.genesScaled, resolution = 0.5)
head(Idents(seuratObj.genesScaled), 5)
adjustedRandIndex(cellTypesDf$subTissues , Idents(seuratObj.genesScaled))
library(Rphenograph)
?Rphenograph
iris
Rphenograph_out <- Rphenograph(t(as.matrix(dat.normalized.hvg)), k = 21)
modularity(Rphenograph_out[[2]])
membership(Rphenograph_out[[2]])
adjustedRandIndex(cellTypesDf$subTissues ,Rphenograph_out[[2]])
adjustedRandIndex(cellTypesDf$subTissues, membership(Rphenograph_out[[2]]))
install.packages("densityCut")
install.packages("‘FNN’, ‘mvtnorm", "RcppAnnoy")
install.packages("FNN", "mvtnorm", "RcppAnnoy")
install.packages(c("FNN", "mvtnorm", "RcppAnnoy"))
library(densitycut)
densityCutCluster <- DensityCut(t(as.matrix(dat.normalized.hvg)))
col = AssignLabelColor(label=densityCutCluster$cluster, col=distinct.col) # Assign colour to clusters
NeatPlot(x=PMF$x[, 1:2], col=col) # Scatter plots
densityCutCluster$cluster
adjustedRandIndex(cellTypesDf$tissue , densityCutCluster$cluster)
library(mclust)
adjustedRandIndex(cellTypesDf$tissue , densityCutCluster$cluster)
length(unique(densityCutCluster$cluster))
install.packages("sctools")
install.packages("remotes")
remotes::install_github("charliex210/sctools")
library(sctools)
## graph-based community detection
set.seed(0)
install.packages("MUDAN")
require(devtools)
devtools::install_github("JEFworks/MUDAN")
BiocManager::install("sva")
require(devtools)
devtools::install_github("JEFworks/MUDAN")
## graph-based community detection
set.seed(0)
com.graph <- MUDAN::getComMembership(t(as.matrix(dat.normalized.hvg)),
k=21, method=igraph::cluster_infomap,
verbose=FALSE)
par(mfrow=c(1,1), mar=rep(2,4))
plotEmbedding(emb, com.graph,
main='Graph-based Community Detection', xlab=NA, ylab=NA,
mark.clusters=TRUE, alpha=0.1, mark.cluster.cex=1,
verbose=FALSE)
??plotEmbedding
MUDAN::plotEmbedding(emb, com.graph,
main='Graph-based Community Detection', xlab=NA, ylab=NA,
mark.clusters=TRUE, alpha=0.1, mark.cluster.cex=1,
verbose=FALSE)
emb <- Rtsne::Rtsne(t(as.matrix(dat.normalized.hvg)),
is_distance=FALSE,
perplexity=30,
num_threads=parallel::detectCores(),
verbose=FALSE)$Y
rownames(emb) <- colnames(dat.normalized.hvg)
MUDAN::plotEmbedding(emb, com.graph,
main='Graph-based Community Detection', xlab=NA, ylab=NA,
mark.clusters=TRUE, alpha=0.1, mark.cluster.cex=1,
verbose=FALSE)
com.graph <- MUDAN::getComMembership(t(as.matrix(dat.normalized.hvg)),
k=21, method=igraph::cluster_infomap,
verbose=T)
com.graph
adjustedRandIndex(com.graph , cellTypesDf$tissue)
dm <- DiffusionMap(data = t(as.matrix(dat.normalized.hvg)) , n_eigs = 2, density_norm = F , distance = "euclidean")
library(destiny)
dm <- DiffusionMap(data = t(as.matrix(dat.normalized.hvg)) , n_eigs = 2, density_norm = F , distance = "euclidean")
dcf <- data.frame(DC1 = eigenvectors(dm2)[,1] , DC2 = eigenvectors(dm2)[,2] ,
name = colnames(iData.selected) , gr = cellTypes)
dcf <- data.frame(DC1 = eigenvectors(dm)[,1] , DC2 = eigenvectors(dm)[,2] ,
name = colnames(iData.selected) , gr = cellTypes)
dcf <- data.frame(DC1 = eigenvectors(dm)[,1] , DC2 = eigenvectors(dm)[,2] ,
name = colnames(dat.normalized.hvg) , gr = cellTypes)
cellTypesTmp <- c(cellTypes , zeroCellTypes)
p <- ggplot(dcf) +
geom_point(aes(x = DC1 , y = DC2 , color = cellTypes$tissue)) +
scale_color_manual(values = scaleColor) +
theme(legend.position = "none")
library(dplyr)
library(ggplot2)
library(gridExtra)
library(readr , warn.conflicts = F , quietly = T)
library(DESeq2 , warn.conflicts = F , quietly = T)
library(destiny)
library(data.tree)
library(igraph)
library(visNetwork)
library(statmod)
library(purrr)
library(Rtsne)
library(mclust)
source("./Src/Utility_Clustering.R")
source("./Src/Utility.R")
options(readr.num_columns = 0)
library(destiny)
dm <- DiffusionMap(data = t(as.matrix(dat.normalized.hvg)) , n_eigs = 2, density_norm = F , distance = "euclidean")
dcf <- data.frame(DC1 = eigenvectors(dm)[,1] , DC2 = eigenvectors(dm)[,2] ,
name = colnames(dat.normalized.hvg) , gr = cellTypes)
p <- ggplot(dcf) +
geom_point(aes(x = DC1 , y = DC2 , color = cellTypes$tissue)) +
scale_color_manual(values = scaleColor) +
theme(legend.position = "none")
p
dcf <- data.frame(DC1 = eigenvectors(dm)[,1] , DC2 = eigenvectors(dm)[,2] ,
name = colnames(dat.normalized.hvg) , gr = cellTypesDf$tissue)
p <- ggplot(dcf) +
geom_point(aes(x = DC1 , y = DC2 , color = cellTypesDf$tissue)) +
scale_color_manual(values = scaleColor) +
theme(legend.position = "none")
p
dcf
p <- ggplot(dcf) +
geom_point(aes(x = DC1 , y = DC2 , color = gr)) +
scale_color_manual(values = scaleColor) +
theme(legend.position = "none")
p
p <- ggplot(dcf) +
geom_point(aes(x = DC1 , y = DC2 , color = gr)) +
theme(legend.position = "none")
p
gr
p <- ggplot(dcf) +
geom_point(aes(x = DC1 , y = DC2 , color = gr))
p
dm <- DiffusionMap(data = t(as.matrix(dat.normalized.hvg)) , n_eigs = 3, density_norm = F , distance = "euclidean")
eigen]
eigenvectors(dm)[,3]
dcf <- data.frame(DC1 = eigenvectors(dm)[,1] , DC2 = eigenvectors(dm)[,2] ,
DC3 = eigenvectors(dm)[,3], name = colnames(dat.normalized.hvg) , gr = cellTypesDf$tissue)
plotly::plot_ly(dcf , x = ~DC1 , y = ~DC2 , z = ~DC3 , color = ~gr)
plotly::plot_ly(dcf , x = ~DC1 , y = ~DC2 , z = ~DC3 , color = ~gr)
tsRes <- Rtsne(X = t(as.matrix(dat.normalized.hvg)) , dims = 2 , perplexity = 50)
p <- visualizetSNEggPlot(tsneObj = tsRes , dims = 2 , cellTypes = cellTypes , sampNames = colnames(dat.normalized) ,
scaleColor = scaleColor , leg = F)
p
install.packages("BioCStyle")
install.packages("BiocStyle")
BiocManager::iins
BiocManager::install("BiocStyle")
seuratObj.genesScaled <- RunPCA(seuratObj.genesScaled , features = VariableFeatures(seuratObj.genesScaled) , verbose = F)
??RunPCA
?RunPCA
?plot_ly
install.packages("M3drop")
install.packages("M3Drop")
BiocManager::install("M3Drop")
install.packages("VennDiagram")
load('iris')
load(iris)
iris
library(dplyr)
iris %>% filter(Petal.Length < 2.0)
iris %>% filter(Petal.Length > 2.0)
iris %>% filter(Petal.Length >= 2.0)
iris %>% filter(Petal.wdi >= 2.0)
iris %>% filter(Petal.Width >= 1.0)
iris %>% filter(Petal.Width < 1.0)
BiocManager::install("plger/SEtools")
knitr::opts_chunk$set(echo = TRUE)
sce <- readRDS(url("http://imlspenticton.uzh.ch/teaching/STA426/week13_SCE_clustered.rds"))
sce <- readRDS(url("http://imlspenticton.uzh.ch/teaching/STA426/week13_SCE_clustered.rds"))
BiocManager::install("muscat")
library(SEtools)
library(muscat)
sce <- readRDS(url("http://imlspenticton.uzh.ch/teaching/STA426/week13_SCE_clustered.rds"))
sce
colData(sce)
colData(sce)
class(assays(sce))
names(assays(sce))
assays(sce)$counts
names(assays(sce))
dim(assays(sce)$counts)
dim(counts(sce))
library(scater)
plotReducedDim(sce, "UMAP")
plotReducedDim(sce, "UMAP", colour_by = "cluster_id")
markers <- list(
astrocytes = c("Aqp4", "Gfap", "Fgfr3"),
endothelial = c("Cldn5","Nostrin"),
microglia = c("C1qb","Tyrobp"),
neuronal = c("Snap25", "Rbfox3"),
neuronal_excitatory = "Slc17a7",
neuronal_inhibitory = "Gad1",
oligodendrocyte = "Opalin",
OPC = "Pdgfra",
pericytes = c("Pdgfrb", "Notch3", "Cspg4")
)
head(row.names(sce))
# using Ensemble gene id
grep("Gad1", row.names(sce), value = TRUE)
# using Ensemble gene id
grep("\\.Gad1$", row.names(sce), value = TRUE)
markers <- lapply(markers, FUN = function(x){
sapply(x,  FUN = function(onegene){
grep(paste0("\\,",onnegene, "$"), row.names(sce) , value = TRUE)
})
})
grep(paste0("\\,",onegene, "$"), row.names(sce) , value = TRUE)
markers <- lapply(markers, FUN = function(x){
sapply(x,  FUN = function(onegene){
grep(paste0("\\,",onegene, "$"), row.names(sce) , value = TRUE)
})
})
markers
grep(paste0("\\.",onegene, "$"), row.names(sce) , value = TRUE)
markers <- lapply(markers, FUN = function(x){
sapply(x,  FUN = function(onegene){
grep(paste0("\\.",onegene, "$"), row.names(sce) , value = TRUE)
})
})
markers
markers <- lapply(markers, FUN = function(x){
sapply(x,  FUN = function(onegene){
grep(paste0("\\.",onegene, "$"), row.names(sce) , value = TRUE)
})
})
markers <- list(
astrocytes = c("Aqp4", "Gfap", "Fgfr3"),
endothelial = c("Cldn5","Nostrin"),
microglia = c("C1qb","Tyrobp"),
neuronal = c("Snap25", "Rbfox3"),
neuronal_excitatory = "Slc17a7",
neuronal_inhibitory = "Gad1",
oligodendrocyte = "Opalin",
OPC = "Pdgfra",
pericytes = c("Pdgfrb", "Notch3", "Cspg4")
)
head(row.names(sce))
# using Ensemble gene id
grep("\\.Gad1$", row.names(sce), value = TRUE)
markers <- lapply(markers, FUN = function(x){
sapply(x,  FUN = function(onegene){
grep(paste0("\\.",onegene, "$"), row.names(sce) , value = TRUE)
})
})
markers
plotExpression(sce, features = unlist(markers), x = "cluster_id")
sce <- logcounts(sce)
sce <- normalizeCounts(sce)
plotExpression(sce, features = unlist(markers), x = "cluster_id")
sce <- readRDS(url("http://imlspenticton.uzh.ch/teaching/STA426/week13_SCE_clustered.rds"))
sce <- normalize(sce)
plotExpression(sce, features = unlist(markers), x = "cluster_id")
sce <- prepSCE(sce, cluster_id = "cluster_id", group_id = "group_id", sample_id = "sample_id")
pb <- aggregateData(sce)
pb
pb
sce
colnames(pb)
# wt together, lps together
pb <- pb[,order(pb$group_id)]
colnames(pb)
pb$group_id
?pbDS
?mmDS
levels(pb$group_id)
res <- pbDS(pb)
pb@metadata$n_cells
pb@metadata$n_cells <- pb@metadata$n_cells[,colnames(pb)]
res <- pbDS(pb)
res
res$table$LPS
res$table$LPS$Astrocytes
library(dplyr)
res$table$LPS$Astrocytes %>% head()
tbl <- muscat::resDS(sce, res)
head(tbl)
dim(tbl)
tbl <- tbl[,order(tbl$p_adj.loc)]
tbl <- tbl[order(tbl$p_adj.loc),]
head(tbl)
pbHeatmap(sce, res, k  = 5)
pbHeatmap(sce, res, top_n = 5)
# pbHeatmap(sce, res, g = "genename")
pbHeatmap(sce, res, g = "pbHeatmap(sce, res, g = "genename")")
# pbHeatmap(sce, res, g = "genename")
pbHeatmap(sce, res, g = "ENSMUSG00000051951.Xkr4")
# pbHeatmap(sce, res, g = "genename")
pbHeatmap(sce, res, g = "ENSMUSG00000051951.Xkr4")
# pbHeatmap(sce, res, g = "genename")
# pbHeatmap(sce, res, g = "ENSMUSG00000051951.Xkr4")
table(tbl$cluster_id, tbl$p_adj.loc < 0.05)
# we have populations that are very large, they affectt DE
plotExpression(sce[,sce$cluster_id == "Endothelial"],
features = head(tbl$gen[tbl$cluster_id == "Endothelial"]))
# we have populations that are very large, they affectt DE
plotExpression(sce[,sce$cluster_id == "Endothelial"],
features = head(tbl$gen[tbl$cluster_id == "Endothelial"]),
x = "sample_id", colour_by = "group_id")
pb2 <- flattenPB(pb)
pb2
colData(pb2)
assayNames(pb2)
colData(pb)
sehm(pb2, head(tbl$gene, 50))
sehm(pb2, head(tbl$gene, 50))
setwd("~/Documents/University/ETH/Semesters/2/IML/Projects/1-a/IML_Projects/task_3/src/")
x2 <- read.csv("./24/prediction_1923.csv")
sum(x1 == x2)
x1 <- read.csv("./26/prediction_1939.csv")
sum(x1 == x2)
sum(x1[x1$X0 == 1] == x2[x2$X0 == 1])
x2[x2$X0 == 1]
x2[.x2$X0 == 1]
x2[,x2$X0 == 1]
x2
class(x2)
x2[x2$X0 == 0,"X0"] <- 2
x1[x1$X0 == 0,"X0"] <- 3
sum(x1 == x2)
x1
x1 == x2
x1[x1 == x2,]
sum(x§)
sum(x1)
x1 <- read.csv("./26/prediction_1939.csv")
x2 <- read.csv("./24/prediction_1923.csv")
sum(x1)
sum(x2)
x2[x2$X0 == 0,"X0"] <- 2
x1[x1$X0 == 0,"X0"] <- 3
sum(x1 == x2)
x3 <- read.csv("./25/prediction_1967.csv")
x1 <- read.csv("./26/prediction_1939.csv")
x2 <- read.csv("./24/prediction_1923.csv")
x3 <- read.csv("./25/prediction_1967.csv")
sum(x3)
sum(x1 == x2)
x1 <- read.csv("./26/prediction_1939.csv")
x2 <- read.csv("./24/prediction_1923.csv")
x3 <- read.csv("./25/prediction_1967.csv")
x1[x1$X0 == 0,"X0"] <- 2
x2[x2$X0 == 0,"X0"] <- 3
x3[x3$X0 == 0,"X0"] <- 4
sum(x1 == x2)
sum(x1 == x3)
sum(x2 == x3)
